
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000188  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000188  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d2  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000741  00000000  00000000  00000b7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000313  00000000  00000000  000012bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000015d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e3  00000000  00000000  00001624  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001a07  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001be1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 30       	cpi	r26, 0x0C	; 12
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 65 00 	call	0xca	; 0xca <main>
  8e:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <blinkLed>:
	}
}

/*	 Blink led n times	*/
void blinkLed(int n){
	for(int i = 0; i < n; i++){
  96:	18 16       	cp	r1, r24
  98:	19 06       	cpc	r1, r25
  9a:	b4 f4       	brge	.+44     	; 0xc8 <blinkLed+0x32>
  9c:	20 e0       	ldi	r18, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
		 PORTC = 0b00100000;
  a0:	40 e2       	ldi	r20, 0x20	; 32
  a2:	48 b9       	out	0x08, r20	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	ef e4       	ldi	r30, 0x4F	; 79
  a6:	f3 ec       	ldi	r31, 0xC3	; 195
  a8:	31 97       	sbiw	r30, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <blinkLed+0x12>
  ac:	00 c0       	rjmp	.+0      	; 0xae <blinkLed+0x18>
  ae:	00 00       	nop
		 _delay_ms(200);
		 PORTC = 0b00000000;
  b0:	18 b8       	out	0x08, r1	; 8
  b2:	ef e4       	ldi	r30, 0x4F	; 79
  b4:	f3 ec       	ldi	r31, 0xC3	; 195
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <blinkLed+0x20>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <blinkLed+0x26>
  bc:	00 00       	nop
	}
}

/*	 Blink led n times	*/
void blinkLed(int n){
	for(int i = 0; i < n; i++){
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	3f 4f       	sbci	r19, 0xFF	; 255
  c2:	28 17       	cp	r18, r24
  c4:	39 07       	cpc	r19, r25
  c6:	69 f7       	brne	.-38     	; 0xa2 <blinkLed+0xc>
  c8:	08 95       	ret

000000ca <main>:
enum {	COL1_PIN = PD3,
		COL2_PIN = PD1,
		COL3_PIN = PD5
	};
	
int main(void){
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	2c 97       	sbiw	r28, 0x0c	; 12
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
	DDRC = 0b00100000; //LED Output
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b11000100; //Column pins output
  e2:	84 ec       	ldi	r24, 0xC4	; 196
  e4:	8a b9       	out	0x0a, r24	; 10
	
	int columnPin[3] = {COL1_PIN, COL2_PIN, COL3_PIN};
  e6:	86 e0       	ldi	r24, 0x06	; 6
  e8:	e0 e0       	ldi	r30, 0x00	; 0
  ea:	f1 e0       	ldi	r31, 0x01	; 1
  ec:	de 01       	movw	r26, r28
  ee:	11 96       	adiw	r26, 0x01	; 1
  f0:	01 90       	ld	r0, Z+
  f2:	0d 92       	st	X+, r0
  f4:	8a 95       	dec	r24
  f6:	e1 f7       	brne	.-8      	; 0xf0 <main+0x26>
	int rowPin[3] = {ROW1_PIN, ROW2_PIN, ROW3_PIN};
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	e6 e0       	ldi	r30, 0x06	; 6
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	de 01       	movw	r26, r28
 100:	17 96       	adiw	r26, 0x07	; 7
 102:	01 90       	ld	r0, Z+
 104:	0d 92       	st	X+, r0
 106:	8a 95       	dec	r24
 108:	e1 f7       	brne	.-8      	; 0x102 <main+0x38>
	
	while(1){
		int num = 1;
 10a:	88 24       	eor	r8, r8
 10c:	83 94       	inc	r8
 10e:	91 2c       	mov	r9, r1
 110:	ce 01       	movw	r24, r28
 112:	07 96       	adiw	r24, 0x07	; 7
 114:	3c 01       	movw	r6, r24
 116:	64 01       	movw	r12, r8
		/*	 Set row output	*/
		for(int j = 0; j < ROWS; j++){
			 PORTD = rowPin[j];
 118:	f3 01       	movw	r30, r6
 11a:	80 81       	ld	r24, Z
 11c:	f2 e0       	ldi	r31, 0x02	; 2
 11e:	6f 0e       	add	r6, r31
 120:	71 1c       	adc	r7, r1
 122:	8b b9       	out	0x0b, r24	; 11
 124:	83 ec       	ldi	r24, 0xC3	; 195
 126:	99 e0       	ldi	r25, 0x09	; 9
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <main+0x5e>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x64>
 12e:	00 00       	nop
 130:	fe 01       	movw	r30, r28
 132:	31 96       	adiw	r30, 0x01	; 1
 134:	7f 01       	movw	r14, r30
 136:	56 01       	movw	r10, r12
 138:	f3 e0       	ldi	r31, 0x03	; 3
 13a:	af 0e       	add	r10, r31
 13c:	b1 1c       	adc	r11, r1
 13e:	86 01       	movw	r16, r12
			 _delay_ms(10);
			/*	 Check column input	*/
			for(int i = 0; i < COLS; i++){
				if(checkPin(columnPin[i])){
 140:	f7 01       	movw	r30, r14
 142:	80 81       	ld	r24, Z
 144:	f2 e0       	ldi	r31, 0x02	; 2
 146:	ef 0e       	add	r14, r31
 148:	f1 1c       	adc	r15, r1
	}
}

/*	 Check digital input on pin, returns 1 / 0	*/
int checkPin(int pin){
	return (PIND & (1 << pin));
 14a:	99 b1       	in	r25, 0x09	; 9
 14c:	94 01       	movw	r18, r8
 14e:	02 c0       	rjmp	.+4      	; 0x154 <main+0x8a>
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	8a 95       	dec	r24
 156:	e2 f7       	brpl	.-8      	; 0x150 <main+0x86>
 158:	89 2f       	mov	r24, r25
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	82 23       	and	r24, r18
 15e:	93 23       	and	r25, r19
		for(int j = 0; j < ROWS; j++){
			 PORTD = rowPin[j];
			 _delay_ms(10);
			/*	 Check column input	*/
			for(int i = 0; i < COLS; i++){
				if(checkPin(columnPin[i])){
 160:	89 2b       	or	r24, r25
 162:	19 f0       	breq	.+6      	; 0x16a <main+0xa0>
					blinkLed(num);
 164:	c8 01       	movw	r24, r16
 166:	0e 94 4b 00 	call	0x96	; 0x96 <blinkLed>
				}
				num++;
 16a:	0f 5f       	subi	r16, 0xFF	; 255
 16c:	1f 4f       	sbci	r17, 0xFF	; 255
		/*	 Set row output	*/
		for(int j = 0; j < ROWS; j++){
			 PORTD = rowPin[j];
			 _delay_ms(10);
			/*	 Check column input	*/
			for(int i = 0; i < COLS; i++){
 16e:	a0 16       	cp	r10, r16
 170:	b1 06       	cpc	r11, r17
 172:	31 f7       	brne	.-52     	; 0x140 <main+0x76>
 174:	83 e0       	ldi	r24, 0x03	; 3
 176:	c8 0e       	add	r12, r24
 178:	d1 1c       	adc	r13, r1
	int rowPin[3] = {ROW1_PIN, ROW2_PIN, ROW3_PIN};
	
	while(1){
		int num = 1;
		/*	 Set row output	*/
		for(int j = 0; j < ROWS; j++){
 17a:	9a e0       	ldi	r25, 0x0A	; 10
 17c:	c9 16       	cp	r12, r25
 17e:	d1 04       	cpc	r13, r1
 180:	59 f6       	brne	.-106    	; 0x118 <main+0x4e>
 182:	c6 cf       	rjmp	.-116    	; 0x110 <main+0x46>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
