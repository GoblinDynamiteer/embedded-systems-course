
keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007dc  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006e3  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c3  00000000  00000000  0000109f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001364  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038a  00000000  00000000  00001398  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  00001722  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000017d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  78:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <blinkLed>:
		_delay_ms(5);
    }
}

void blinkLed(int n){
	for(int i = 0; i < n; i++){
  80:	18 16       	cp	r1, r24
  82:	19 06       	cpc	r1, r25
  84:	e4 f4       	brge	.+56     	; 0xbe <blinkLed+0x3e>
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
		 PORTC = 0b00100000;
  8a:	40 e2       	ldi	r20, 0x20	; 32
  8c:	48 b9       	out	0x08, r20	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	5f e5       	ldi	r21, 0x5F	; 95
  90:	6a ee       	ldi	r22, 0xEA	; 234
  92:	70 e0       	ldi	r23, 0x00	; 0
  94:	51 50       	subi	r21, 0x01	; 1
  96:	60 40       	sbci	r22, 0x00	; 0
  98:	70 40       	sbci	r23, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <blinkLed+0x14>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <blinkLed+0x1e>
  9e:	00 00       	nop
		 _delay_ms(300);
		 PORTC = 0b00000000;
  a0:	18 b8       	out	0x08, r1	; 8
  a2:	5f e5       	ldi	r21, 0x5F	; 95
  a4:	6a ee       	ldi	r22, 0xEA	; 234
  a6:	70 e0       	ldi	r23, 0x00	; 0
  a8:	51 50       	subi	r21, 0x01	; 1
  aa:	60 40       	sbci	r22, 0x00	; 0
  ac:	70 40       	sbci	r23, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <blinkLed+0x28>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <blinkLed+0x32>
  b2:	00 00       	nop
		_delay_ms(5);
    }
}

void blinkLed(int n){
	for(int i = 0; i < n; i++){
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	28 17       	cp	r18, r24
  ba:	39 07       	cpc	r19, r25
  bc:	39 f7       	brne	.-50     	; 0x8c <blinkLed+0xc>
  be:	08 95       	ret

000000c0 <main>:

void blinkLed(int n);

int main(void)
{
	DDRC = 0b00100000;
  c0:	80 e2       	ldi	r24, 0x20	; 32
  c2:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b00000100;
  c4:	84 e0       	ldi	r24, 0x04	; 4
  c6:	8a b9       	out	0x0a, r24	; 10
	
	PORTD = 0b00000100;
  c8:	8b b9       	out	0x0b, r24	; 11
	
	//blinkLed(10);
	while (1) {
		if(PIND & (1 << PD5)){
  ca:	4d 9b       	sbis	0x09, 5	; 9
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <main+0x16>
			blinkLed(3);
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 40 00 	call	0x80	; 0x80 <blinkLed>
		}
		if (PIND & (1 << PD3)){
  d6:	4b 9b       	sbis	0x09, 3	; 9
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <main+0x22>
			blinkLed(1);
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	0e 94 40 00 	call	0x80	; 0x80 <blinkLed>
  e2:	81 ee       	ldi	r24, 0xE1	; 225
  e4:	94 e0       	ldi	r25, 0x04	; 4
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x26>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x2c>
  ec:	00 00       	nop
  ee:	ed cf       	rjmp	.-38     	; 0xca <main+0xa>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
