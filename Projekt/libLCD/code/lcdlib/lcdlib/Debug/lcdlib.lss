
lcdlib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000104  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008fd  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006d7  00000000  00000000  00000af5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000317  00000000  00000000  000011cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b6  00000000  00000000  00001528  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000047  00000000  00000000  000018de  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001925  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  78:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <toggleE>:

#define RSPIN	7
#define EPIN	6

void toggleE(){
	PORTB |= (1<<EPIN);
  80:	2e 9a       	sbi	0x05, 6	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	00 00       	nop
	_delay_us(1);
	PORTB &= ~(1<<EPIN);
  84:	2e 98       	cbi	0x05, 6	; 5
  86:	00 00       	nop
  88:	08 95       	ret

0000008a <clearDisplay>:
	_delay_us(1);
}

void clearDisplay(){
	PORTB &= ~(1<<RSPIN);
  8a:	2f 98       	cbi	0x05, 7	; 5
  8c:	00 00       	nop
	_delay_us(1);
	PORTD = 0b00000001; //Clear display
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	83 ef       	ldi	r24, 0xF3	; 243
  94:	91 e0       	ldi	r25, 0x01	; 1
  96:	01 97       	sbiw	r24, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <clearDisplay+0xc>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <clearDisplay+0x12>
  9c:	00 00       	nop
	_delay_ms(2);
	toggleE();
  9e:	0e 94 40 00 	call	0x80	; 0x80 <toggleE>
  a2:	08 95       	ret

000000a4 <main>:


int main(void)
{
	/*	 Set pins as write!		*/
	DDRD = 0b11111111; //0xff
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b11000000; //0xc0	
  a8:	80 ec       	ldi	r24, 0xC0	; 192
  aa:	84 b9       	out	0x04, r24	; 4
	PORTB = 0b00000000;
  ac:	15 b8       	out	0x05, r1	; 5
	PORTD = 0x0C; //Set display on
  ae:	8c e0       	ldi	r24, 0x0C	; 12
  b0:	8b b9       	out	0x0b, r24	; 11
  b2:	89 ef       	ldi	r24, 0xF9	; 249
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <main+0x12>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <main+0x18>
  bc:	00 00       	nop
	_delay_ms(1);
	toggleE();
  be:	0e 94 40 00 	call	0x80	; 0x80 <toggleE>
	clearDisplay();
  c2:	0e 94 45 00 	call	0x8a	; 0x8a <clearDisplay>
	toggleE();
}


int main(void)
{
  c6:	0f 2e       	mov	r0, r31
  c8:	f1 e1       	ldi	r31, 0x11	; 17
  ca:	ff 2e       	mov	r15, r31
  cc:	f0 2d       	mov	r31, r0
  ce:	00 e0       	ldi	r16, 0x00	; 0
	clearDisplay();
	int counter = 16;
    while (1) {	
		PORTB |= (1<<RSPIN);
		//7 6 5 4 3 2 1 0
		PORTD = 0b00001111;
  d0:	1f e0       	ldi	r17, 0x0F	; 15
	toggleE();
}


int main(void)
{
  d2:	cf 2d       	mov	r28, r15
  d4:	d0 2f       	mov	r29, r16
	_delay_ms(1);
	toggleE();
	clearDisplay();
	int counter = 16;
    while (1) {	
		PORTB |= (1<<RSPIN);
  d6:	2f 9a       	sbi	0x05, 7	; 5
		//7 6 5 4 3 2 1 0
		PORTD = 0b00001111;
  d8:	1b b9       	out	0x0b, r17	; 11
  da:	89 ef       	ldi	r24, 0xF9	; 249
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <main+0x3a>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x40>
  e4:	00 00       	nop
		_delay_ms(1);
		toggleE();
  e6:	0e 94 40 00 	call	0x80	; 0x80 <toggleE>
  ea:	87 ea       	ldi	r24, 0xA7	; 167
  ec:	91 e6       	ldi	r25, 0x61	; 97
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x4a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x50>
  f4:	00 00       	nop
  f6:	21 97       	sbiw	r28, 0x01	; 1
		_delay_ms(100);
		if(!counter--){
  f8:	71 f7       	brne	.-36     	; 0xd6 <main+0x32>
			clearDisplay();
  fa:	0e 94 45 00 	call	0x8a	; 0x8a <clearDisplay>
  fe:	e9 cf       	rjmp	.-46     	; 0xd2 <main+0x2e>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
